var deltaX = [-1, +0, +1, +1, +1, +0, -1, -1];
var deltaY = [-1, -1, -1, +0, +1, +1, +1, +0];

var walkerX = 1;
var walkerY = 5;
var walkerDir = 1;

function fillWalkStart(border) {
	while (border[walkerX + deltaX[walkerDir]][walkerY + deltaY[walkerDir]] !== true) {
		walkerDir = (walkerDir + 2) % 8;
	}
	walkerDir = (walkerDir + 6) % 8;
}

function fillWalk(border) {
	// rechts gehen, wenn möglich
	// gerade gehen, wenn möglich
	// links gehen, wenn möglich
	// sonst fertig!

	walkerDir = (walkerDir + 2) % 8;
	if (border[walkerX + deltaX[walkerDir]][walkerY + deltaY[walkerDir]] === true) {
		walkerDir = (walkerDir + 6) % 8;

		if (border[walkerX + deltaX[walkerDir]][walkerY + deltaY[walkerDir]] === true) {
			walkerDir = (walkerDir + 6) % 8;

			if (border[walkerX + deltaX[walkerDir]][walkerY + deltaY[walkerDir]] === true) {
				walkerDir = (walkerDir + 6) % 8;

				if (border[walkerX + deltaX[walkerDir]][walkerY + deltaY[walkerDir]] === true) {
					walkerDir = null;
					return;
				}
			}
		}
	}
}

function fillSpace(border) {
	var check0Dir = (walkerDir + 7) % 8;
	var check7Dir = (walkerDir + 6) % 8;
	var check6Dir = (walkerDir + 5) % 8;
	var check3Dir = (walkerDir + 2) % 8;
	if (border[walkerX + deltaX[check0Dir]][walkerY + deltaY[check0Dir]] !== true
		&& border[walkerX + deltaX[check7Dir]][walkerY + deltaY[check7Dir]] !== true
		&& border[walkerX + deltaX[check6Dir]][walkerY + deltaY[check6Dir]] !== true
		&& border[walkerX + deltaX[check3Dir]][walkerY + deltaY[check3Dir]] === true) {
		border[walkerX][walkerY] = true;
	}

	var check3Dir = (walkerDir + 2) % 8;
	var check5Dir = (walkerDir + 4) % 8;
	var check7Dir = (walkerDir + 6) % 8;
	if (border[walkerX + deltaX[check3Dir]][walkerY + deltaY[check3Dir]] === true
		&& border[walkerX + deltaX[check5Dir]][walkerY + deltaY[check5Dir]] === true
		&& border[walkerX + deltaX[check7Dir]][walkerY + deltaY[check7Dir]] === true) {
		border[walkerX][walkerY] = true;
	}
}

test("fillWalkerTest: Walk the line", function() {
	walkerX = 1;
	walkerY = 5;
	walkerDir = 1;

	var border = "" +
		"  1     \n" +
		"  1     \n" +
		"  1111  \n" +
		"     1  \n" +
		"  1111  \n" +
		"  1     \n" +
		"        \n";
	border = convertToField(border);

	for (var i = 0; i < 10; i++) {
		fillWalk(border);

		walkerX += deltaX[walkerDir];
		walkerY += deltaY[walkerDir];
	}

	equal(walkerX, 1);
	equal(walkerY, 1);
});

test("fillWalkerTest: Walk the cycle", function() {
	walkerX = 1;
	walkerY = 1;
	walkerDir = 1;

	var border = "" +
		"          \n" +
		"  111111  \n" +
		"   11     \n" +
		"    11    \n" +
		"          \n" +
		"          \n";
	border = convertToField(border);

	for (var i = 0; i < 24; i++) {
		fillWalk(border);

		walkerX += deltaX[walkerDir];
		walkerY += deltaY[walkerDir];
	}

	equal(walkerX, 1);
	equal(walkerY, 1);
});

test("fillWalkerTest: Walk around block", function() {
	walkerX = 3;
	walkerY = 1;
	walkerDir = 1;

	var border = "" +
		"     \n" +
		" 11  \n" +
		"     \n";
	border = convertToField(border);

	fillWalkStart(border);
	for (var i = 0; i < 10; i++) {
		fillWalk(border);

		walkerX += deltaX[walkerDir];
		walkerY += deltaY[walkerDir];
	}

	equal(walkerX, 3);
	equal(walkerY, 1);
});

test("fillWalkerTest: fill line", function() {
	walkerX = 7;
	walkerY = 1;
	walkerDir = 1;

	var border = "" +
		" 11    1 \n" +
		"1  1  1 1\n" +
		" 1  1 1 1\n" +
		"  1  11 1\n" +
		"   1  1 1\n" +
		"    1   1\n" +
		"    11111\n";
	border = convertToField(border);

	fillWalkStart(border);
	for (var i = 0; i < 50 && walkerDir !== null; i++) {
		fillWalk(border);

		if (walkerDir !== null) {
			fillSpace(border);

			walkerX += deltaX[walkerDir];
			walkerY += deltaY[walkerDir];
		}
	}

	equal(walkerX, 1);
	equal(walkerY, 1);
});

test("fillWalkerTest: fill rectangles", function() {
	walkerX = 1;
	walkerY = 4;
	walkerDir = 1;

	var border = "" +
		"         1111 \n" +
		"        1    1\n" +
		"        1    1\n" +
		" 11111111    1\n" +
		"1            1\n" +
		"1     111 111\n" +
		"1     1 1 1\n" +
		"1     1 1 1111111111111111\n" +
		"1     1 1                 1\n" +
		"1     1 1                 1\n" +
		"1     1 1                 1\n" +
		"1     1 1                 1\n" +
		"1     1 1                 1\n" +
		" 11111   11111111111111111 \n";

	border = convertToField(border);
	var vis = convertToText(border);

	fillWalkStart(border);
	for (var i = 0; i < 500 && walkerDir !== null; i++) {
		fillWalk(border);

		if (walkerDir !== null) {
			fillSpace(border);
			vis = convertToText(border);
//			console.log(vis);

			walkerX += deltaX[walkerDir];
			walkerY += deltaY[walkerDir];
		}
	}

	equal(walkerX, 24);
	equal(walkerY, 9);
});


test("fillWalkerTest: fill triangle", function() {
	walkerX = 1;
	walkerY = 4;
	walkerDir = 1;

	var border = "" +
		" 111111111111 \n" +
		"1            1\n" +
		"1            1\n" +
		"1            1\n" +
		"1            1\n" +
		"1            1\n" +
		"1            1\n" +
		"1            1\n" +
		"1            1\n" +
		"1            1\n" +
		" 1111   11111 \n" +
		"    1   1 \n" +
		"    1   1 \n" +
		"   1     1 \n" +
		"  1       1 \n" +
		" 1         1 \n" +
		"1           1\n" +
		" 11111111111 \n";

	border = convertToField(border);
	var vis = convertToText(border);

	fillWalkStart(border);
	for (var i = 0; i < 500 && walkerDir !== null; i++) {
		fillWalk(border);

		if (walkerDir !== null) {
			fillSpace(border);
			vis = convertToText(border);

			walkerX += deltaX[walkerDir];
			walkerY += deltaY[walkerDir];
		}
	}

	equal(walkerX, 9);
	equal(walkerY, 4);
});

